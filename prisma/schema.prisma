// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// relationMode = "prisma"

generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}
model User {
  id              String @id @default(uuid()) @map("_id")
  name            String
  email           String  @unique
  imageUrl        String?
  emailVerified   DateTime?
  hashedPassword  String
  role            String  @default("user") // user, admin
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  accounts Account[]
  projects Project[]
  skills Skill[]
  experiences Experience[]
  testimonials Testimonial[]
  resumes Resume[]
  privacy Privacy[]
  terms Term[]
}
model Account {
  id                 String @id @default(uuid()) @map("_id")
  userId             String   
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}
model Project {
  id   String @id @default(uuid()) @map("_id") 
  name String
  explanation String
  viewUrl String
  githubUrl String
  imageUrl  String
  isFeatured  Boolean   @default(false)
  userId   String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId]) 
}
model Skill {
  id   String @id @default(uuid()) @map("_id")
  label String
  imageUrl String
  isFeatured  Boolean   @default(false)
  userId   String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId]) 
}
model Experience {
  id   String @id @default(uuid()) @map("_id")
  year String
  language String
  description String
  isFeatured  Boolean   @default(false)
  userId   String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId]) 
}
model Testimonial {
  id        String @id @default(uuid()) @map("_id")
  name      String
  role      String
  company   String
  comment   String
  imageUrl  String
  isFeatured  Boolean   @default(false)
  userId    String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId]) 
}

model Resume {
  id           String @id @default(uuid()) @map("_id")
  note         String
  isFeatured   Boolean @default(false)
  userId       String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
model Privacy {
  id           String @id @default(uuid()) @map("_id")
  note         String
  isFeatured   Boolean @default(false)
  userId       String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
model Term {
  id           String @id @default(uuid()) @map("_id")
  note         String
  isFeatured   Boolean @default(false)
  userId       String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Contact {
  id           String @id @default(uuid()) @map("_id")
  name         String
  email        String
  message      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}